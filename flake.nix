{
  description = "First generated by https://github.com/juspay/nix-dev-home; `nix run` to activate";

  inputs = {
    # Principle inputs (updated by `nix run .#update`)
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    flake-parts.url = "github:hercules-ci/flake-parts";
    nixos-flake.url = "github:srid/nixos-flake";

    # see https://github.com/nix-systems/default/blob/main/default.nix
    systems.url = "github:nix-systems/default";
  };

  outputs = inputs:
    inputs.flake-parts.lib.mkFlake { inherit inputs; } {
      systems = import inputs.systems;
      imports = [
        inputs.nixos-flake.flakeModule
      ];

      flake.templates.default = {
        description = "A `home-manager` template providing useful tools & settings for Nix-based development";
        path = builtins.path {
          path = ./.;
          filter = path: _: with inputs.nixpkgs.lib;
            !(hasSuffix "LICENSE" path ||
              hasSuffix "README.md" path ||
              hasSuffix "flake.lock" path);
        };
      };

      perSystem = { self', pkgs, ... }:
        let
          myUserName = "zhen";
        in
        {
          legacyPackages.homeConfigurations.${myUserName} =
            inputs.self.nixos-flake.lib.mkHomeConfiguration
              pkgs
              ({ pkgs, ... }: 
              let 
                userHome = "/${if pkgs.stdenv.isDarwin then "Users" else "home"}/${myUserName}";
              in
              {

                nixpkgs.config.allowUnfree = true;

                # Edit the contents of the ./home directory to install packages and modify dotfile configuration in your
                # $HOME.
                #
                # https://nix-community.github.io/home-manager/index.html#sec-usage-configuration
                imports = [ ./home ];
                home.username = myUserName;
                home.homeDirectory = userHome;
                home.stateVersion = "23.11";

                home.packages = with pkgs; [
                  jdk17
                  nodejs
                  # postgresql14Packages.pgsql-http
                ];

                programs.git.enable = true;
                programs.starship.enable = true;
                programs.zsh.enable = true;

                programs.vscode = {
                  enable = true;
                  # package = pkgs.vscodium;  #pkgs.vscode.fhs;
                  userSettings = {
                    "editor.cursorStyle" = "line";
                    "editor.cursorWidth" = 4;
                    "window.zoomLevel" = 1;
                    "git.autofetch" = false;
                    "diffEditor.ignoreTrimWhitespace" = true;
                    "gitlens.views.lineHistory.enabled" = true;
                    "gitlens.advanced.messages" = {
                      "suppressFileNotUnderSourceControlWarning" = true;
                    };
                    "files.exclude" = {
                      "**/.classpath" = true;
                      "**/.project" = true;
                      "**/.settings" = true;
                      "**/.factorypath" = true;
                    };
                    "files.watcherExclude" = {
                      "**/.bloop" = true;
                      "**/.metals" = true;
                      "**/.ammonite" = true;
                    };
                    # "remote.SSH.defaultExtensions" =
                    #   [ "eamodio.gitlens" "scalameta.metals" "ms-python.python" ];
                    # "metals.javaHome" = "/home/zhenhao/.nix-profile";
                    "metals.javaHome" = "${userHome}/.nix-profile";
                    "java.semanticHighlighting.enabled" = true;
                    # "python.jediEnabled" = true;
                    # "python.linting.pylintEnabled" = false;
                    # "python.linting.enabled" = true;
                    # "python.linting.flake8Enabled" = false;
                  };
                  extensions = with pkgs.vscode-extensions;
                    [
                      bbenoist.nix
                      # ms-python.python
                      matklad.rust-analyzer
                      # scala-lang.scala
                      # scalameta.metals
                      # ms-vsliveshare.vsliveshare
                      ms-vscode-remote.remote-ssh
                    ] ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
                      # {
                      #   name = "Nix";
                      #   publisher = "bbenoist";
                      #   version = "1.0.1";
                      #   sha256 = "0zd0n9f5z1f0ckzfjr38xw2zzmcxg1gjrava7yahg5cvdcw6l35b";
                      # }
                      {
                        name = "metals";
                        publisher = "scalameta";
                        version = "1.27.0";
                        sha256 =
                          "ilqr0Z56553FtBG/e0cmu1uwUbWFSGe2mxfkTt6uyZs="; # 0000000000000000000000000000000000000000000000000000
                      }
                      {
                        name = "scala";
                        publisher = "scala-lang";
                        version = "0.5.7";
                        sha256 = "cjMrUgp2+zyqT7iTdtMeii81X0HSly//+gGPOh/Mfn4=";
                      }
                    ];
                };
              });

          formatter = pkgs.nixpkgs-fmt;

          # Enables 'nix run' to activate.
          apps.default.program = self'.packages.activate-home;

          # Enable 'nix build' to build the home configuration, but without
          # activating.
          packages.default = self'.legacyPackages.homeConfigurations.${myUserName}.activationPackage;

          devShells.default = pkgs.mkShell {
            name = "nix-dev-home";
            nativeBuildInputs = with pkgs; [ just ];
          };
        };
    };
}
